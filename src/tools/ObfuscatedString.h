/*!
* This file is part of FortiRDP
*
* Copyright (C) 2022 Jean-Noel Meurisse
* SPDX-License-Identifier: Apache-2.0
*
*/
#pragma once

#include <string>


namespace tools {
	/*
	* Represents an obfuscated string.  This class is used to avoid keeping session cookies
	* in clear text in the program memory.  The string is obfuscated using bit rotation.
	* While this obfuscation method is trivial, it has the advantage that we can perform
	* some string operations (take a substring, find a character occurrence, ...) without
	* having to de-obfuscate the string in a temporary buffer.
	*/
	class obfstring final
	{
	public:
		/* Allocates an empty obfuscated string
		*/
		obfstring();

		/* Allocates a copy of the obfuscated string
		*/
		obfstring(const obfstring& other) = default;
		
		/* Allocates an obfuscated string initialized from the other string
		*/
		explicit obfstring(const std::string& other);

		/*
		*/
		explicit obfstring(obfstring&& other);

		/*
		*/
		obfstring& operator= (const obfstring& other) = default;


		/* Appends a copy of str
		*/
		obfstring& append(const std::string& str);
		
		/* Appends a copy of the first n characters in the array of characters 
		 * pointed by str.
		*/
		obfstring& append(const char* str, size_t n);
		
		/* Appends a copy of the secure string str
		*/
		obfstring& append(const obfstring& str);

		/* Appends the character
		*/
		void push_back(char c);

		/* Clear the obfuscated string
		*/
		void clear();
		
		/* Finds the first character equal to the given character
		*/
		size_t find(const char ch) const;

		/* Searches the obfuscated string for the last character that does not match
		 * any characters specified in the argument.
		*/
		size_t find_last_not_of(const std::string &str) const;

		/* Searches the obfuscated string for the first character that does not match
		 * any of the characters specified in its arguments.
		*/
		size_t find_first_not_of(const std::string& str) const;

		/* returns the length of the string
		*/
		inline size_t size() const { return _obfuscated_text.size(); }

		/* returns the length of the string
		*/
		inline size_t length() const { return _obfuscated_text.length(); }

		/* returns a substring
		*/
		obfstring substr(size_t pos, size_t len = std::string::npos) const;

		/* Returns the clear character at position 'pos'
		*/
		inline char operator[](int pos) const { return decode(_obfuscated_text[pos], _key); }

		/* Returns the clear string.
		 * Warning: this method allocates the de-obfuscated value on the heap as a standard
		 * string.  It is not possible to control how many copies are generated by the
		 * compiler if the value is assigned to another variable.
		*/
		std::string uncrypt() const;

		/* Fills the buffer with the de-obfuscated string.
		*/
		void uncrypt(char* buffer, size_t size, size_t offset=0) const noexcept;

	private:
		// Generates a random key
		static char create_obfuscation_key() noexcept;

		// Obfuscate a character (assuming 1 <= k <= 7)
		inline static char encode(char c, int k) noexcept { return _rotl8(c, k); }

		// De-obfuscated a character (assuming 1 <= k <= 7)
		inline static char decode(char c, int k) noexcept { return _rotr8(c, k); }

		// Allocates a copy of the key and the obfuscated string
		obfstring(char key, const char* secstr);

		// Obfuscation key (between 1 and 7)
		char _key;

		// The obfuscated string
		std::string _obfuscated_text;
	};

}
